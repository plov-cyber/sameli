version: "3"

services:

  sameli:
    build:
      context: ..
      args:
        EXTRAS: "torch"
    container_name: sameli
    command: [ "--conf", "/app/conf/torch_model.yaml" ]
    ports:
      - "8000:8000"
    volumes:
      - ../conf:/app/conf
    networks:
      - services
    depends_on:
      kafka-broker:
        condition: service_healthy
      redis:
        condition: service_healthy

  kafka-broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka-broker
    ports:
      - "9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "kafka-zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - kafka-zookeeper
    networks:
      - services
    restart: on-failure
    healthcheck:
      test: |
        kafka-topics --bootstrap-server localhost:9092 --list || exit 1
      interval: 5s
      timeout: 10s
      retries: 15

  kafka-zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: kafka-zookeeper
    ports:
      - "2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - services
    restart: on-failure

  redis:
    image: redis:7.0-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - services
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis_data:/data

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - services
    depends_on:
      - sameli
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - services
    depends_on:
      - prometheus
    restart: unless-stopped

networks:
  services:
    driver: bridge

volumes:
  redis_data:
  grafana_data: